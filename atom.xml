<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Dawn's Mirror]]></title>
  <subtitle><![CDATA[code the world]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2017-03-12T12:39:34.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Dawn Zhang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[一年]]></title>
    <link href="http://yoursite.com/2017/03/12/%E4%B8%80%E5%B9%B4/"/>
    <id>http://yoursite.com/2017/03/12/一年/</id>
    <published>2017-03-12T12:25:35.000Z</published>
    <updated>2017-03-12T12:39:34.000Z</updated>
    <content type="html"><![CDATA[<p>距离上一次更新，已经11个月又一周，实在是太糟糕了。。。</p>
<p>这一年过的，从哪里说呢。<br><a id="more"></a><br>晨晨啊，我真是对你，太不满意了。但是。但是。操蛋的生活还是要继续。</p>
<p>很多很多情绪，快要把我困住。音乐会给人得救的错觉，一旦相信了，却也能走出困境了。</p>
<p>CHANGE TAKES TIME.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>距离上一次更新，已经11个月又一周，实在是太糟糕了。。。</p>
<p>这一年过的，从哪里说呢。<br>]]>
    
    </summary>
    
      <category term="bullshit" scheme="http://yoursite.com/tags/bullshit/"/>
    
      <category term="life" scheme="http://yoursite.com/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[每个人都是一座孤岛]]></title>
    <link href="http://yoursite.com/2016/04/05/%E6%AF%8F%E4%B8%AA%E4%BA%BA%E9%83%BD%E6%98%AF%E4%B8%80%E5%BA%A7%E5%AD%A4%E5%B2%9B/"/>
    <id>http://yoursite.com/2016/04/05/每个人都是一座孤岛/</id>
    <published>2016-04-04T17:24:39.000Z</published>
    <updated>2016-04-04T19:28:28.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xpyd5.com1.z0.glb.clouddn.com/hexo%2Fisland.jpg" alt=""><br>这个世界很多人，很少人和你相关。<br><a id="more"></a></p>
<h2 id="a"><a href="#a" class="headerlink" title="a"></a>a</h2><p>清明3天的假期，浑浑噩噩的最后一天，女生不合理的生理期，蜷缩在床上一整天，到深夜的时候突然清醒过来。</p>
<p>大学、工作、辞职，不断地换城市，不断地适应新的环境。</p>
<p>却好像每到一个地方都变了一个人。说不定各处的友人描述起来都截然相反，“开朗，爱玩”、“乖，可爱”、“内向、安静”。</p>
<p>都是我。</p>
<h2 id="b"><a href="#b" class="headerlink" title="b"></a>b</h2><p>而最近突然进入一种孑然一身的状态。朋友也好，恋人也好，亲人也罢，重重关卡下来，我们早已被传送到不同的分支。而这一次我又一个人上路了。</p>
<p>搬家需要做很多事、一点点去选购、慢慢填满住所，整个过程充满胡思乱想。人们之所以需要伴侣、甚至婚姻，是不是寻求一种稳固的陪伴，以摆脱时时刻刻的孤寂感，以显得泯然众人，而非突出于人群的显眼，“你看那个人和别人不一样”。</p>
<p>面对友善却已经形成了各自稳固生活圈的同事，总觉得融入是件刻意的事。也许工作上的交集可以让彼此熟悉起来吧。</p>
<h2 id="u65F6_u95F4"><a href="#u65F6_u95F4" class="headerlink" title="时间"></a>时间</h2><p>我最好的朋友是谁，我最爱的人是谁，我最依赖的人是谁。</p>
<h3 id="C5"><a href="#C5" class="headerlink" title="Å"></a>Å</h3><p>我曾经以为我最好的朋友是cy，相识十几年，成年后不在一所学校、不在一座城市，却也一直断续有着联系，有时深夜接到她哭泣的电话把我吵醒，有时是一封信、一本书、一张明信片。她了解我很深。我信任她很真。</p>
<p>而这次来到杭州，相处很久。看到了她新的生活，新的闺蜜，新的男友。我依然希望她一切都好，依然相信她仍是最初我认识的那个细腻敏感的不得了的女生，依然相信她对我的好。但时间是最可怕的事。分别之后，我们都有了更多的依赖。</p>
<h3 id="uF8FF"><a href="#uF8FF" class="headerlink" title=""></a></h3><p>哈尔滨的四年，我最依赖的人是药药。我一直跟人说，她对我的好。我们一起走过许多地方。我们对其他人都大方袒露喜爱，却互相冷淡折磨。我记得有一次，我问她为什么不理我，她不说，我说那算了，就要走，她哭了，问她对我来说算什么，也是唯一一次。</p>
<p>药药是那么温柔一个人，所以我最介意的，你有那么多那么好的朋友，每个都可以写出一篇长文，我不知道自己排在哪里。</p>
<p>药药和我隔了半个中国。</p>
<h3 id="u25CA"><a href="#u25CA" class="headerlink" title="◊"></a>◊</h3><p>可以无话不谈、相处最久的是猪。她出国的时候，我又难过又懵，以后不知道还有谁可以跟我一起打发无聊而有趣的时间了。</p>
<p>猪和我隔了一片海洋，不知道会不会再回来。即使不回来，我也想去找她。</p>
<h3 id="BF"><a href="#BF" class="headerlink" title="¿"></a>¿</h3><p>喜欢的人啊，刚好是男朋友。我希望他开心，而我生气的时候他总不高兴。所以不要再生气了，独处的时间是宝贵的才对。所以健身、旅游、美食、画画、追剧、写代码，<strong>做所有热爱的事，爱原本就爱的人</strong>。</p>
<p>现在和我隔了9个小时的车程，五个月后要分隔开半块漂移版块。</p>
<h3 id="CD"><a href="#CD" class="headerlink" title="Í"></a>Í</h3><p>最爱的人，妈妈。要身体健康。</p>
<p>常常心疼的人，姐姐，希望姐姐可以过轻松自在想要的生活。</p>
<h2 id="u91D1_u94B1"><a href="#u91D1_u94B1" class="headerlink" title="金钱"></a>金钱</h2><p>想念的、依赖的，都不在身边，没有什么好小心翼翼，足够任性，才够自在。</p>
<p>再不睡觉，上班起不来要迟到了，迟到是要扣钱的！</p>
<p>晚安。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xpyd5.com1.z0.glb.clouddn.com/hexo%2Fisland.jpg" alt=""><br>这个世界很多人，很少人和你相关。<br>]]>
    
    </summary>
    
      <category term="bullshit" scheme="http://yoursite.com/tags/bullshit/"/>
    
      <category term="life" scheme="http://yoursite.com/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[初次尝试——filterOL]]></title>
    <link href="http://yoursite.com/2016/02/29/%E5%88%9D%E6%AC%A1%E5%B0%9D%E8%AF%95%E2%80%94%E2%80%94filterOL/"/>
    <id>http://yoursite.com/2016/02/29/初次尝试——filterOL/</id>
    <published>2016-02-29T09:57:16.000Z</published>
    <updated>2016-02-29T11:01:13.000Z</updated>
    <content type="html"><![CDATA[<h2 id="filterOL_u662F_u4EC0_u4E48"><a href="#filterOL_u662F_u4EC0_u4E48" class="headerlink" title="filterOL是什么"></a>filterOL是什么</h2><blockquote>
<p><a href="https://github.com/dawn-CC/filterOL" target="_blank" rel="external">code</a></p>
<p><a href="http://dawn-cc.github.io/filterOL/" target="_blank" rel="external">demo</a></p>
</blockquote>
<p>大概长这样<br><img src="http://7xpyd5.com1.z0.glb.clouddn.com/filterOL%2FfOL-mb.jpg"><br><a id="more"></a><br>filterOL是一个在线版的图片滤镜效果调节页面，技术上来说就是把css3中的filter功能做成可视化功能，额，比较的简陋。</p>
<p><strong>不过是一次很好的练习！</strong>起初是看到canvas内容的时候想做的，实现的时候觉得filter更简单，就用了canvas。</p>
<h2 id="u6536_u83B7"><a href="#u6536_u83B7" class="headerlink" title="收获"></a>收获</h2><ul>
<li>先写了js部分，在打算写页面的时候，看到了UI框架这种东西，之前未曾接触过，这里作了一次尝试，引入了<code>pure.css</code>中的side-bar；</li>
<li>在看<code>pure.css</code>文档的时候，发现每个功能的使用方法理解起来很简单，但是如果是对页面布局有自己的要求，而需要灵活利用框架中的一部分的时候，问题就会比较多。甚至觉得不如完全自己写来的方便；</li>
<li>我认为框架的好处有两点<ul>
<li>在没有设计的情况下不至于让页面太丑陋</li>
<li>框架和模版的代码，内容简练，注释清晰，格式规范，适合初学者好好学习</li>
</ul>
</li>
<li>起初push之后发现demo打开缓慢，所以，web上压缩图片是必须的，在线的<a href="https://tinypng.com/" target="_blank" rel="external">https://tinypng.com/</a>用来压图非常nice，压图并不改变图片px值；</li>
<li>在考虑移动端布局的时候，图片和滑条的位置关系，想让滑条呈现一列功能栏，单击隐藏或打开。这里框架中的side-bar很符合，于是就引入了。原先让我自己来写的话，打算的是单击按钮，可以toggle使ul元素show或者hide。</li>
<li><strong>移动端的适配</strong>用了非常粗暴的方法，对图片针对父容器采用绝对定位。通过定位，如果图片比窗口大，则会充满视口。用手机测试了一下，显示效果还可以。这里又学会了可以用chrome的手机图标小按钮来调适。</li>
<li>其实写代码的过程中也遇到了一些问题，解决之后实在涨经验啊，暂且不表。有时间的话可以更新一下。我又要投简历去了……ಥ_ಥ ಥ_ಥ ಥ_ಥ</li>
</ul>
<h2 id="u95EE_u9898"><a href="#u95EE_u9898" class="headerlink" title="问题"></a>问题</h2><ul>
<li>有时候刷新，图片的位置间歇性的会变化，应该是由于使用ready函数的时候图片还未加载完，已修改；</li>
<li>还是刷新问题，body使用了一个渐变的黑色背景，有时候背景不能正常显示，是因为css没有加载完？研究中……</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="filterOL_u662F_u4EC0_u4E48"><a href="#filterOL_u662F_u4EC0_u4E48" class="headerlink" title="filterOL是什么"></a>filterOL是什么</h2><blockquote>
<p><a href="https://github.com/dawn-CC/filterOL">code</a></p>
<p><a href="http://dawn-cc.github.io/filterOL/">demo</a></p>
</blockquote>
<p>大概长这样<br><img src="http://7xpyd5.com1.z0.glb.clouddn.com/filterOL%2FfOL-mb.jpg"><br>]]>
    
    </summary>
    
      <category term="demo" scheme="http://yoursite.com/tags/demo/"/>
    
      <category term="pure.css" scheme="http://yoursite.com/tags/pure-css/"/>
    
      <category term="code" scheme="http://yoursite.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[反思与打算_(´･_･`)]]></title>
    <link href="http://yoursite.com/2016/02/28/%E5%8F%8D%E6%80%9D%E4%B8%8E%E6%89%93%E7%AE%97-%C2%B4%EF%BD%A5-%EF%BD%A5/"/>
    <id>http://yoursite.com/2016/02/28/反思与打算-´･-･/</id>
    <published>2016-02-27T17:57:55.000Z</published>
    <updated>2016-02-28T04:21:12.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u6700_u8FD1"><a href="#u6700_u8FD1" class="headerlink" title="最近"></a>最近</h2><p>这四天七七八八看了三本书</p>
<ul>
<li>《JavaScript语言精粹（修订版）》——80%</li>
<li>《精通CSS：高级Web标准解决方案(第2版)》——65%</li>
<li>《锋利的jQuery 第2版》——60%</li>
</ul>
<a id="more"></a>
<p>跳过了许多内容，有些是由于时间紧张、没有详细分析案例；有些是由于一下子实在看得太多，接受能力有限，所以大概有一些印象，用到的时候再行仔细翻阅。</p>
<p>至于看到最后一本的时候，在最近的焦虑状态下，加上pdf带来的不适，耐心终于被耗的差不多了，几乎是在慕课网的jQuery教程和pdf之间不停的来回切，才终于干掉。看红皮书的时候就愉快多了，<strong>论买实体书的必要性</strong>。</p>
<p>so, 实践的时候到了。</p>
<h2 id="u6253_u7B97"><a href="#u6253_u7B97" class="headerlink" title="打算"></a>打算</h2><p>找工作这种事，也不是我说要什么时候找到，就能什么时候找到的。</p>
<p><strong>明天醒来再做一个小demo，填充一下我可怜巴巴的简历。就要等投递和面试结果了。希望速战速决。</strong></p>
<p>我有很多愿望想要去达成。</p>
<p>工作上的不多～</p>
<ul>
<li>技术提高工资变多就好了……</li>
<li>哦对了，我想当个又能设计还会后端的全栈哈哈哈</li>
</ul>
<p>生活上一大堆＝＝</p>
<ul>
<li>捡回来忘的差不多的大三学了一年的日语；</li>
<li>曾经辛辛苦苦做家教赚钱买的板子一直在冷宫缦立远视，而望幸焉，不能对美人无情；</li>
<li>吃好吃的，做好吃的；</li>
<li>攒了钱再考虑吧，澎湃的数码欲呵&gt;.&lt;</li>
</ul>
<h2 id="u6709_u4E9B_u5E9F_u8BDD"><a href="#u6709_u4E9B_u5E9F_u8BDD" class="headerlink" title="有些废话"></a>有些废话</h2><p>母上曾经找神棍给我算命的时候算出来说，我的心太静了，比最纯净的水更静（如此玛丽苏的说法）。很少有人见到我上火的样子。其实，水的比喻算是恰当，谁知道水面之下是什么景象呢？</p>
<p>作为一个二十四小时每个时刻都能睡着、且睡的无知无觉的人，原本一年失眠不了两次的我，这两天每天都要辗转2个小时才能睡着。我是焦虑的。我也急于想摆脱这种焦虑。</p>
<h3 id="u53CD_u601D"><a href="#u53CD_u601D" class="headerlink" title="反思"></a>反思</h3><p>我想起提出辞职的那天，是我生日的前一天，我想要为自己做个决定，而后果当然自己来承担。</p>
<p>辞职的原因有很多，家庭的、个人的、公司的。妈妈虽想让我回到浙沪附近，但她不愿意我放弃一份能让我过得不错的工作，所以她是坚决反对的。而我总有着那么些，洒脱狂妄。人活一世，一些事比另一些事重要，比如亲人比他人的看法重要、梦想比奢靡重要。</p>
<p>当然，俗人如我，洒脱是不够的。2个月没有收入、过年还发出去几千块红包、现在借住在杭州的同学家的我……要赚钱啊！◡ ヽ(`Д´)ﾉ ┻━┻ 从后端码农转到前端小白，知道积累和踏实的重要性，我也只能在有限的时间内尽可能提高自己，尽快解决入不敷出的窘境sad。</p>
<h3 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h3><p>本命年，虚岁13，不小了，又一次重新出发。前进吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u6700_u8FD1"><a href="#u6700_u8FD1" class="headerlink" title="最近"></a>最近</h2><p>这四天七七八八看了三本书</p>
<ul>
<li>《JavaScript语言精粹（修订版）》——80%</li>
<li>《精通CSS：高级Web标准解决方案(第2版)》——65%</li>
<li>《锋利的jQuery 第2版》——60%</li>
</ul>]]>
    
    </summary>
    
      <category term="bullshit" scheme="http://yoursite.com/tags/bullshit/"/>
    
      <category term="life" scheme="http://yoursite.com/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript学习－图解原型]]></title>
    <link href="http://yoursite.com/2016/02/24/JavaScript%E5%AD%A6%E4%B9%A0%EF%BC%8D%E5%9B%BE%E8%A7%A3%E5%8E%9F%E5%9E%8B/"/>
    <id>http://yoursite.com/2016/02/24/JavaScript学习－图解原型/</id>
    <published>2016-02-24T11:36:00.000Z</published>
    <updated>2016-02-24T15:40:37.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u56FE_u89E3_u539F_u578B"><a href="#u56FE_u89E3_u539F_u578B" class="headerlink" title="图解原型"></a>图解原型</h2><p>之前针对原型和闭包写过一篇笔记，现在看来，那时候并没有真正理解原型，只是查阅整理了许多资料，有了一个似是而非的认识。</p>
<p>这里通过一段代码和自己画的一个分析图作说明～<br><img src="http://7xpyd5.com1.z0.glb.clouddn.com/hexo%2Fjs-prototype.png" alt=""><br><a id="more"></a></p>
<blockquote>
<p>题目参考了<a name="xaber"></a><a href="http://xaber.co/2016/02/06/JavaScript%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%20%E2%80%94%E2%80%94%20%E5%8E%9F%E5%9E%8Bprototype/" target="_blank" rel="external">Xaber’s blog</a>。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;<span class="comment">//TIME1</span></span><br><span class="line">A.prototype = &#123;</span><br><span class="line">    num: <span class="number">1</span>,</span><br><span class="line">    text: <span class="string">'aaa'</span></span><br><span class="line">&#125;;<span class="comment">//TIME2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> A();</span><br><span class="line"><span class="built_in">console</span>.log(x.num);<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(x.text);<span class="comment">//'aaa'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> y = <span class="keyword">new</span> A();</span><br><span class="line">A.prototype = &#123;</span><br><span class="line">    num: <span class="number">2</span></span><br><span class="line">&#125;;<span class="comment">//TIME3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(y.num);<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(y.text);<span class="comment">//'aaa'</span></span><br><span class="line"></span><br><span class="line">y.num = <span class="number">3</span>;<span class="comment">//此时x.num = 1</span></span><br><span class="line"><span class="keyword">var</span> z = <span class="keyword">new</span> A();</span><br><span class="line"><span class="built_in">console</span>.log(z.num);<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(z.text);<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>
<p>需要注意的是，给<code>A.prototype</code>赋值一个以字面量形式创建的新对象是时，相当于重写了原型对象，会切断现有原型与任何之前已经存在的对象实例(<code>x, y</code>)之间的联系，它们引用的仍然是最初的原型。</p>
<p>此时，测试instanceof 可以得到</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x <span class="keyword">instanceof</span> A;<span class="comment">//false</span></span><br><span class="line">y <span class="keyword">instanceof</span> A;<span class="comment">//false</span></span><br><span class="line">z <span class="keyword">instanceof</span> A;<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h2 id="u4E00_u4E9B_u5E9F_u8BDD"><a href="#u4E00_u4E9B_u5E9F_u8BDD" class="headerlink" title="一些废话"></a>一些废话</h2><p>17号参加了离职以来的第一次面试，也是第一次面对前端的面试。</p>
<p>第一次打怪就被KO了，感人的是回城的路上get了一本攻略，面试官大大<a href="/#xaber">👆</a>给我发了一篇邮件，列出了一些前端学习上的建议和书单，其中有一句话是这样说的</p>
<blockquote>
<p>不要急着学react这些，如果一开始没有学好基础，学了那些东西，只会用，其实也没有什么适用性。</p>
</blockquote>
<p><del>之前的学习一直针对ife的任务来进行，看了许多线上的资料和博客，从完成页面和交互小任务的过程中，最大的收获可能是不知道哪儿来的成就感和自信……</del></p>
<p>对前端有了一定的认识之后，<strong>是时候系统的看一些书了</strong>。这6天断断续续看了两本书，跳过了个别部分。</p>
<ul>
<li>《JavaScript DOM编程艺术 第2版》</li>
<li>《JavaScript高级程序设计（第3版）》</li>
</ul>
<p>前者比较浅显，帮助梳理了掌握的一些方法；后者则收获很大，帮助理解了许多基础知识及拓展了知识点。有些地方虽说理解了，记住却需要反复看，这一轮书单清空之后可以<mark>再看一遍</mark>～</p>
<p>不多说，k下一本书去了。ಥ_ಥ</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u56FE_u89E3_u539F_u578B"><a href="#u56FE_u89E3_u539F_u578B" class="headerlink" title="图解原型"></a>图解原型</h2><p>之前针对原型和闭包写过一篇笔记，现在看来，那时候并没有真正理解原型，只是查阅整理了许多资料，有了一个似是而非的认识。</p>
<p>这里通过一段代码和自己画的一个分析图作说明～<br><img src="http://7xpyd5.com1.z0.glb.clouddn.com/hexo%2Fjs-prototype.png" alt=""><br>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="code" scheme="http://yoursite.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git 使用]]></title>
    <link href="http://yoursite.com/2016/02/15/git-%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/02/15/git-使用/</id>
    <published>2016-02-15T10:23:59.000Z</published>
    <updated>2016-02-28T04:23:41.000Z</updated>
    <content type="html"><![CDATA[<p>记录一下平时使用github的方式，和一些常用命令。</p>
<h2 id="u914D_u5408github_u4F7F_u7528"><a href="#u914D_u5408github_u4F7F_u7528" class="headerlink" title="配合github使用"></a>配合github使用</h2><ul>
<li>在github上新建repository</li>
<li>本地<code>git clone https://xxx.xxx.git &lt;directory&gt;</code> </li>
<li>在本地进行开发</li>
<li><code>git add file</code>将文件添加到暂存区</li>
<li><code>git commit -m &#39;xxx&#39;</code>将文件提交到版本库</li>
<li><code>git status</code>可以查看git状态<a id="more"></a></li>
<li><code>git push origin A:B</code>将本地A分支的内容push到远程的B分支上，B省略则根据追踪关系判断，B不存在则新建与A同名的分支，A省略则删除指定分支</li>
<li>如果需要更新github上新的内容至本地<ul>
<li><code>git fetch origin B</code>取回指定分支B的更新至本地，B省略则取回所有分支</li>
<li><code>git pull origin B:A</code>取回指定分支B并合并至本地分支A上</li>
<li>fetch与pull的区别在于pull多了一个merge操作</li>
</ul>
</li>
</ul>
<h2 id="u5206_u652F_u7BA1_u7406"><a href="#u5206_u652F_u7BA1_u7406" class="headerlink" title="分支管理"></a>分支管理</h2><ul>
<li><code>git checkout -b A</code>创建并切换到A分支</li>
<li><code>git branch A</code>创建A分支</li>
<li><code>git checkout A</code>切换到A分支</li>
<li><code>git branch</code>查看当前分支</li>
<li><code>git merge A</code>将分支A合并到当前分支</li>
<li><code>git branch -d A</code>删除A分支</li>
</ul>
<h2 id="u7248_u672C_u63A7_u5236"><a href="#u7248_u672C_u63A7_u5236" class="headerlink" title="版本控制"></a>版本控制</h2><ul>
<li><code>git log --pretty=oneline</code>查看提交日志</li>
<li><code>git reset --hard HEAD^</code>回退到上一个版本或指定回退到版本号</li>
<li><code>git reflog</code>查看命令日志可查找到指定版本号</li>
<li><code>git checkout -- file</code>撤销修改，即，使工作区的file回到最近一次add或commit的状态来恢复文件。</li>
<li><code>git reset HEAD file</code>撤销暂存区的修改，工作区仍保留</li>
</ul>
<h3 id="u5220_u9664"><a href="#u5220_u9664" class="headerlink" title="删除"></a>删除</h3><p>有一次没有设置好.gitignore，误将<code>.DStore</code>add到暂存区了</p>
<ul>
<li><code>git rm -r --cached file</code>可以撤销<code>git add</code>，参数说明见下</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">usage: git rm [&lt;options&gt;] [--] &lt;file&gt;...</span><br><span class="line"></span><br><span class="line">    -n, --dry-run         dry run</span><br><span class="line">    -q, --quiet           <span class="keyword">do</span> not list removed files</span><br><span class="line">    --cached              only remove from the index</span><br><span class="line">    <span class="operator">-f</span>, --force           override the up-to-date check</span><br><span class="line">    -r                    allow recursive removal</span><br><span class="line">    --ignore-unmatch      <span class="built_in">exit</span> with a zero status even <span class="keyword">if</span> nothing matched</span><br></pre></td></tr></table></figure>
<h2 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git教程 - 廖雪峰的官方网站</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="external">Git远程操作详解 - 阮一峰的网络日志</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>记录一下平时使用github的方式，和一些常用命令。</p>
<h2 id="u914D_u5408github_u4F7F_u7528"><a href="#u914D_u5408github_u4F7F_u7528" class="headerlink" title="配合github使用"></a>配合github使用</h2><ul>
<li>在github上新建repository</li>
<li>本地<code>git clone https://xxx.xxx.git &lt;directory&gt;</code> </li>
<li>在本地进行开发</li>
<li><code>git add file</code>将文件添加到暂存区</li>
<li><code>git commit -m &#39;xxx&#39;</code>将文件提交到版本库</li>
<li><code>git status</code>可以查看git状态]]>
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="code" scheme="http://yoursite.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript深度学习-原型与闭包]]></title>
    <link href="http://yoursite.com/2016/02/13/JavaScript%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E5%8E%9F%E5%9E%8B%E4%B8%8E%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2016/02/13/JavaScript深度学习-原型与闭包/</id>
    <published>2016-02-13T07:41:50.000Z</published>
    <updated>2016-02-24T15:36:43.000Z</updated>
    <content type="html"><![CDATA[<p>学习JavaScript闭包、设计模式等内容过程中，简单做一些笔记整理，便于自己的理解。</p>
<h2 id="u4F5C_u7528_u57DF"><a href="#u4F5C_u7528_u57DF" class="headerlink" title="作用域"></a>作用域</h2><h3 id="u5168_u5C40_u4F5C_u7528_u57DF_28Global_Scope_29"><a href="#u5168_u5C40_u4F5C_u7528_u57DF_28Global_Scope_29" class="headerlink" title="全局作用域(Global Scope)"></a>全局作用域(Global Scope)</h3><ul>
<li>最外层函数</li>
<li>最外层函数外定义的变量</li>
<li>未定义直接赋值的变量</li>
<li>window对象的属性</li>
</ul>
<a id="more"></a>
<h3 id="u5C40_u90E8_u4F5C_u7528_u57DF_28Local_Scope_29"><a href="#u5C40_u90E8_u4F5C_u7528_u57DF_28Local_Scope_29" class="headerlink" title="局部作用域(Local Scope)"></a>局部作用域(Local Scope)</h3><ul>
<li>函数内部定义的变量</li>
<li>内部函数</li>
</ul>
<h3 id="u4F5C_u7528_u57DF_u94FE_28Scope_Chain_29"><a href="#u4F5C_u7528_u57DF_u94FE_28Scope_Chain_29" class="headerlink" title="作用域链(Scope Chain)"></a>作用域链(Scope Chain)</h3><blockquote>
<p><a href="http://www.cnblogs.com/lhb25/archive/2011/09/06/javascript-scope-chain.html" target="_blank" rel="external">理解 JavaScript 作用域和作用域链</a></p>
</blockquote>
<ul>
<li><code>[[Scope]]</code>是函数对象的一个内部属性。</li>
<li>任何执行上下文时刻的作用域, 都是由作用域链(scope chain)来实现，作用域链决定了哪些数据能被函数访问，包含了函数被创建的作用域中对象的集合。</li>
<li>在一个函数被定义的时候, 会将它定义时刻的scope chain链接到这个函数对象的<code>[[scope]]</code>属性。</li>
</ul>
<p>一般，一个作用域链包括父级变量对象（variable object）（作用域链的顶部）、函数自身变量VO和活动对象（activation object）。with或者catch语句可能导致作用域变更。</p>
<h3 id="u5176_u4ED6"><a href="#u5176_u4ED6" class="headerlink" title="其他"></a>其他</h3><ul>
<li>变量提升：自动把所有声明的变量提升到函数顶部，不提升赋值。</li>
<li><p>执行上下文(<a href="http://www.cnblogs.com/wangfupeng1988/p/3987563.html" target="_blank" rel="external">简述【执行上下文】下</a>)：</p>
<ul>
<li>变量、函数表达式——变量声明，默认赋值为undefined；</li>
<li>this——赋值；</li>
<li>函数声明——赋值；</li>
</ul>
</li>
<li><p>块级作用域：let与const都具有块级作用域。</p>
</li>
<li>优化：多用局部变量代替全局变量使用。</li>
<li><p>自由变量跨作用域取值：去创建这个函数的作用域取值，而不是“父作用域”。</p>
<h2 id="u539F_u578B"><a href="#u539F_u578B" class="headerlink" title="原型"></a>原型</h2><h3 id="prototype_u5C5E_u6027"><a href="#prototype_u5C5E_u6027" class="headerlink" title="prototype属性"></a>prototype属性</h3><p><code>prototype</code>属性可以向对象添加属性和方法。</p>
</li>
<li><p>给obj对象的<code>prototype</code>属性赋值字面量来设定原型</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj.prototype = &#123;</span><br><span class="line">	a: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">	b: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>赋值原型prototype时使用function立即执行的表达式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj.prototype = &#123;</span><br><span class="line">	a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">	b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>也可以分步声明</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.prototype.a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">obj.prototype.b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="5B_5BPrototype_5D_5D_uFF0F__proto"><a href="#5B_5BPrototype_5D_5D_uFF0F__proto" class="headerlink" title="[[Prototype]]／__proto__"></a>[[Prototype]]／__proto__</h3><blockquote>
<p><a href="http://www.cnblogs.com/ziyunfei/archive/2012/10/05/2710955.html" target="_blank" rel="external">[译]JavaScript: __proto__</a></p>
</blockquote>
<p><code>__proto__</code> (发音为“dunder proto”,dunder是“double underscore”的简拼)最初出现在Firefox中,作为内部属性[[Prototype]]的别名。</p>
<p>每个对象都有一个<code>__proto__</code>属性，指向创建该对象的函数的prototype。</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.__proto__ === <span class="built_in">Object</span>.getPrototypeOf(obj)</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><code>__proto__</code>可以用来创建一个以指定对象为原型的对象。</p>
<p>在JavaScript中，所有的对象都是基于 <code>Object</code>；所有的对象都继承了<code>Object.prototype</code>的属性和方法。<code>Object.prototype</code>的<code>__proto__</code>指向的是null。</p>
<blockquote>
<p>从 ECMAScript 6 开始, <code>[[Prototype]]</code> 可以用<code>Object.getPrototypeOf()</code>和<code>Object.setPrototypeOf()</code>访问器来访问。不推荐使用<code>__proto__</code>。</p>
</blockquote>
<h3 id="u539F_u578B_u94FE"><a href="#u539F_u578B_u94FE" class="headerlink" title="原型链"></a>原型链</h3><blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" target="_blank" rel="external">继承与原型链 - JavaScript | MDN</a></p>
</blockquote>
<p>原型链具有继承属性。</p>
<blockquote>
<p>在 javaScript 中，每个对象都有一个指向它的原型（prototype）对象的内部链接。这个原型对象又有自己的原型，直到某个对象的原型为 null 为止（也就是不再有原型指向），组成这条链的最后一环。这种一级一级的链结构就称为原型链（prototype chain）。</p>
</blockquote>
<h4 id="u5C5E_u6027_u67E5_u627E"><a href="#u5C5E_u6027_u67E5_u627E" class="headerlink" title="属性查找"></a>属性查找</h4><p>属性查找：从自身开始沿原型链查找。当重复时存在”属性遮蔽 (property shadowing)”。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">o.someProp;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行上述语句时，它会检查是否存在 someProp 属性。</p>
<p>如果没有，则查找 <code>Object.getPrototypeOf(o).someProp</code> 仍旧没有，继续查找<code>Object.getPrototypeOf(Object.getPrototypeOf(o)).someProp</code> ，一直查找下去，直到找到或者 <code>Object.getPrototypeOf()</code> 返回 null 。</p>
</blockquote>
<h4 id="u5BF9_u8C61_u521B_u5EFA_u4E0E_u539F_u578B_u94FE"><a href="#u5BF9_u8C61_u521B_u5EFA_u4E0E_u539F_u578B_u94FE" class="headerlink" title="对象创建与原型链"></a>对象创建与原型链</h4><p>一切（引用类型）都是对象，对象是属性的集合。</p>
<ol>
<li><p>普通语法</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;a: <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// o这个对象继承了Object.prototype上面的所有属性</span></span><br><span class="line"><span class="comment">// 所以可以这样使用 o.hasOwnProperty('a').</span></span><br><span class="line"><span class="comment">// hasOwnProperty 是Object.prototype的自身属性。</span></span><br><span class="line"><span class="comment">// Object.prototype的原型为null。</span></span><br><span class="line"><span class="comment">// 原型链如下:</span></span><br><span class="line"><span class="comment">// o ---&gt; Object.prototype ---&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [<span class="string">"yo"</span>, <span class="string">"whadup"</span>, <span class="string">"?"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组都继承于Array.prototype </span></span><br><span class="line"><span class="comment">// (indexOf, forEach等方法都是从它继承而来).</span></span><br><span class="line"><span class="comment">// 原型链如下:</span></span><br><span class="line"><span class="comment">// a ---&gt; Array.prototype ---&gt; Object.prototype ---&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数都继承于Function.prototype</span></span><br><span class="line"><span class="comment">// (call, bind等方法都是从它继承而来):</span></span><br><span class="line"><span class="comment">// f ---&gt; Function.prototype ---&gt; Object.prototype ---&gt; null</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Object.create()可以创建一个拥有指定原型的新对象(ES5)。<br> <code>var newObj = Object.create(proto);</code></p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;a: <span class="number">1</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">Object</span>.create(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">Object</span>.create(b);</span><br><span class="line"><span class="comment">// c ---&gt; b ---&gt; a ---&gt; Object.prototype ---&gt; null</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用构造函数</p>
</li>
</ol>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> Foo();</span><br></pre></td></tr></table></figure>
</blockquote>
<p>JavaScript 实际上执行的是：</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">o.[[Prototype]] = Foo.prototype;</span><br><span class="line">Foo.call(o);</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="u95ED_u5305_28Closure_29"><a href="#u95ED_u5305_28Closure_29" class="headerlink" title="闭包(Closure)"></a>闭包(Closure)</h2><blockquote>
<p><a href="http://www.cnblogs.com/wangfupeng1988/p/3994065.html" target="_blank" rel="external">深入理解javascript原型和闭包（15）——闭包</a></p>
</blockquote>
<ul>
<li>闭包是指函数有自由独立的变量。<ul>
<li>一般函数执行完毕后，局部活动对象被销毁，内存中仅保存全局上下文环境。</li>
<li>存在闭包的情况，即函数中A可能返回的函数B中引用了A的上下文环境，那么A执行之后其上下文环境仍然存在，直到B被调用之后不再引用，此时A的上下文环境才被销毁。</li>
</ul>
</li>
<li>使用闭包会造成内存消耗</li>
<li>上下文环境不同于作用域，一个作用域可能存在多个上下文环境。</li>
</ul>
<hr>
<p>待续</p>
<ul>
<li>构造函数</li>
<li>面向对象编程</li>
<li>设计模式</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>学习JavaScript闭包、设计模式等内容过程中，简单做一些笔记整理，便于自己的理解。</p>
<h2 id="u4F5C_u7528_u57DF"><a href="#u4F5C_u7528_u57DF" class="headerlink" title="作用域"></a>作用域</h2><h3 id="u5168_u5C40_u4F5C_u7528_u57DF_28Global_Scope_29"><a href="#u5168_u5C40_u4F5C_u7528_u57DF_28Global_Scope_29" class="headerlink" title="全局作用域(Global Scope)"></a>全局作用域(Global Scope)</h3><ul>
<li>最外层函数</li>
<li>最外层函数外定义的变量</li>
<li>未定义直接赋值的变量</li>
<li>window对象的属性</li>
</ul>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="code" scheme="http://yoursite.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ife-task0002总结]]></title>
    <link href="http://yoursite.com/2016/01/19/ife-task0002%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/01/19/ife-task0002总结/</id>
    <published>2016-01-18T16:47:17.000Z</published>
    <updated>2016-02-24T15:36:33.000Z</updated>
    <content type="html"><![CDATA[<p>task0002的内容是Javascript的学习。</p>
<p><a href="https://github.com/baidu-ife/ife/tree/master/2015_spring/task/task0002#任务描述" target="_blank" rel="external"><strong>任务要求</strong></a></p>
<p><a href="https://github.com/dawn-CC/ife-task/tree/master/task0002" target="_blank" rel="external"><strong>code</strong></a></p>
<p><a href="http://dawn-cc.github.io/ife-task/task0002/task0002_1" target="_blank" rel="external"><strong>demo</strong></a><br><a id="more"></a></p>
<h2 id="Javascript_u7684_u52A0_u8F7D_u4E0E_u6267_u884C"><a href="#Javascript_u7684_u52A0_u8F7D_u4E0E_u6267_u884C" class="headerlink" title="Javascript的加载与执行"></a>Javascript的加载与执行</h2><blockquote>
<p><a href="http://www.ibm.com/developerworks/cn/web/1308_caiys_jsload/index.html" target="_blank" rel="external">JavaScript 的性能优化：加载和执行</a></p>
</blockquote>
<ol>
<li><p>浏览器遇到&lt;script&gt;标签会阻塞页面的下载和渲染，等待脚本下载和执行完成后再继续。</p>
<p> 推荐将所有&lt;script&gt;标签尽可能放到<body>标签的底部，以减    少对整个页面下载的影响。</body></p>
</li>
<li><p>执行脚本会导致一定的延时，且HTTP 请求会带来额外的性能开销。</p>
<p> 因此限制外链脚本、内嵌脚本的数量。</p>
</li>
<li>采用无阻塞脚本的方法：页面加载完成后才加载Javascript。<ul>
<li>使用defer属性异步加载和执行（在onload事件触发前被调用）</li>
<li>使用async属性（与defer相似，区别在于下载完成后立即执行）HTML5特性。</li>
<li>动态创建&lt;script&gt;元素等。</li>
</ul>
</li>
</ol>
<h2 id="u6570_u636E_u7C7B_u578B_u5224_u65AD"><a href="#u6570_u636E_u7C7B_u578B_u5224_u65AD" class="headerlink" title="数据类型判断"></a>数据类型判断</h2><blockquote>
<p><a href="https://github.com/ecomfe/spec/blob/master/javascript-style-guide.md#341-类型检测" target="_blank" rel="external">Javascript编码规范3.4.1类型检测</a></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'string'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// number</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'number'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'boolean'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Function</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'function'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'object'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// RegExp</span></span><br><span class="line">variable <span class="keyword">instanceof</span> <span class="built_in">RegExp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array</span></span><br><span class="line">variable <span class="keyword">instanceof</span> <span class="built_in">Array</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// null</span></span><br><span class="line">variable === <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// null or undefined</span></span><br><span class="line">variable == <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'undefined'</span></span><br></pre></td></tr></table></figure>
<h3 id="u5224_u65AD_u6570_u7EC4_u7C7B_u578B"><a href="#u5224_u65AD_u6570_u7EC4_u7C7B_u578B" class="headerlink" title="判断数组类型"></a>判断数组类型</h3><blockquote>
<p>参考<a href="http://www.nowamagic.net/librarys/veda/detail/1250" target="_blank" rel="external">js如何判断一个对象是不是Array</a></p>
</blockquote>
<p>instanceof方法在多frame穿梭下判断会出错。</p>
<p>利用call()方法，使Array对象借用Object对象上的方法，得到对象的字符串表示，对比此字符串是否是’[object Array]’。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// return Array.isArray(arr); ES5</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(arr) === <span class="string">'[objec Array]'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u6B63_u5219_u8868_u8FBE_u5F0F"><a href="#u6B63_u5219_u8868_u8FBE_u5F0F" class="headerlink" title="正则表达式"></a>正则表达式</h2><blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="external">正则表达式 - JavaScript | MDN</a></p>
</blockquote>
<h3 id="u8BED_u6CD5"><a href="#u8BED_u6CD5" class="headerlink" title="语法"></a>语法</h3><table>
<thead>
<tr>
<th>标志</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>g</td>
<td>全局搜索。</td>
</tr>
<tr>
<td>i</td>
<td>不区分大小写搜索。</td>
</tr>
<tr>
<td>m</td>
<td>多行搜索。</td>
</tr>
<tr>
<td>y</td>
<td>执行“粘性”搜索,匹配从目标字符串的当前位置开始，可以使用y标志。</td>
</tr>
</tbody>
</table>
<p>表1.常用的元字符</p>
<table>
<thead>
<tr>
<th>代码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>.</td>
<td>匹配除换行符以外的任意字符</td>
</tr>
<tr>
<td>\w</td>
<td>匹配字母或数字或下划线或汉字</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任意的空白符</td>
</tr>
<tr>
<td>\d</td>
<td>匹配数字</td>
</tr>
<tr>
<td>\b</td>
<td>匹配单词的开始或结束</td>
</tr>
<tr>
<td>^</td>
<td>匹配字符串的开始</td>
</tr>
<tr>
<td></td>
<td>匹配字符串的结束      </td>
</tr>
</tbody>
</table>
<p>表2.常用的限定符</p>
<table>
<thead>
<tr>
<th>代码/语法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>*</td>
<td>重复零次或更多次</td>
</tr>
<tr>
<td>+</td>
<td>重复一次或更多次</td>
</tr>
<tr>
<td>?</td>
<td>重复零次或一次</td>
</tr>
<tr>
<td>{n}</td>
<td>重复n次</td>
</tr>
<tr>
<td>{n,}</td>
<td>重复n次或更多次</td>
</tr>
<tr>
<td>{n,m}</td>
<td>重复n到m次 </td>
</tr>
</tbody>
</table>
<p>表3.常用的反义代码</p>
<table>
<thead>
<tr>
<th>代码/语法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>\W</td>
<td>匹配任意不是字母，数字，下划线，汉字的字符</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任意不是空白符的字符</td>
</tr>
<tr>
<td>\D</td>
<td>匹配任意非数字的字符</td>
</tr>
<tr>
<td>\B</td>
<td>匹配不是单词开头或结束的位置</td>
</tr>
<tr>
<td>[^x]</td>
<td>匹配除了x以外的任意字符</td>
</tr>
<tr>
<td>[^aeiou]</td>
<td>匹配除了aeiou这几个字母以外的任意字符</td>
</tr>
</tbody>
</table>
<p>表4.常用分组语法</p>
<table>
<thead>
<tr>
<th>分类</th>
<th>代码/语法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>捕获</td>
<td>(exp)</td>
<td>匹配exp,并捕获文本到自动命名的组里</td>
</tr>
<tr>
<td></td>
<td>(?<name>exp)</name></td>
<td>匹配exp,并捕获文本到名称为name的组里，也可以写成(?’name’exp)</td>
</tr>
<tr>
<td></td>
<td>(?:exp)</td>
<td>匹配exp,不捕获匹配的文本，也不给此分组分配组号</td>
</tr>
<tr>
<td>零宽断言</td>
<td>(?=exp)</td>
<td>匹配exp前面的位置</td>
</tr>
<tr>
<td></td>
<td>(?&lt;=exp)</td>
<td>匹配exp后面的位置</td>
</tr>
<tr>
<td></td>
<td>(?!exp)</td>
<td>匹配后面跟的不是exp的位置</td>
</tr>
<tr>
<td></td>
<td>(?&lt;!exp)</td>
<td>匹配前面不是exp的位置</td>
</tr>
<tr>
<td>注释</td>
<td>(?#comment)</td>
<td>这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读</td>
</tr>
</tbody>
</table>
<p>表5.懒惰限定符</p>
<table>
<thead>
<tr>
<th>代码/语法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>*?</td>
<td>重复任意次，但尽可能少重复</td>
</tr>
<tr>
<td>+?</td>
<td>重复1次或更多次，但尽可能少重复</td>
</tr>
<tr>
<td>??</td>
<td>重复0次或1次，但尽可能少重复</td>
</tr>
<tr>
<td>{n,m}?</td>
<td>重复n到m次，但尽可能少重复</td>
</tr>
<tr>
<td>{n,}?</td>
<td>重复n次以上，但尽可能少重复</td>
</tr>
</tbody>
</table>
<h3 id="u5206_u7EC4_u4E3E_u4F8B"><a href="#u5206_u7EC4_u4E3E_u4F8B" class="headerlink" title="分组举例"></a>分组举例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"John Smith"</span>.replace(<span class="regexp">/(\w+)\s(\w+)/</span>, <span class="string">"$2, $1"</span>);</span><br><span class="line"><span class="string">"Smith, John"</span></span><br></pre></td></tr></table></figure>
<h3 id="u5B57_u7B26_u4E32_u5339_u914D"><a href="#u5B57_u7B26_u4E32_u5339_u914D" class="headerlink" title="字符串匹配"></a>字符串匹配</h3><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>regexp.test</td>
<td>返回是否匹配，true/false</td>
</tr>
<tr>
<td>str.search</td>
<td>返回是否匹配，位置索引/-1</td>
</tr>
<tr>
<td>regexp.exec</td>
<td>返回匹配数组或null</td>
</tr>
<tr>
<td>str.match</td>
<td>返回匹配数组或null</td>
</tr>
</tbody>
</table>
<h2 id="u83B7_u53D6_u5143_u7D20_u4F4D_u7F6E"><a href="#u83B7_u53D6_u5143_u7D20_u4F4D_u7F6E" class="headerlink" title="获取元素位置"></a>获取元素位置</h2><blockquote>
<p><a href="http://www.ruanyifeng.com/blog/2009/09/find_element_s_position_using_javascript.html" target="_blank" rel="external">用Javascript获取页面元素的位置</a></p>
</blockquote>
<h3 id="u83B7_u53D6_u7EDD_u5BF9_u4F4D_u7F6E"><a href="#u83B7_u53D6_u7EDD_u5BF9_u4F4D_u7F6E" class="headerlink" title="获取绝对位置"></a>获取绝对位置</h3><p>利用element.offsetLeft。</p>
<h3 id="u83B7_u53D6_u6EDA_u52A8_u4F4D_u7F6E"><a href="#u83B7_u53D6_u6EDA_u52A8_u4F4D_u7F6E" class="headerlink" title="获取滚动位置"></a>获取滚动位置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left = <span class="built_in">document</span>.body.scrollLeft || <span class="built_in">document</span>.documentElement.scrollLeft;</span><br></pre></td></tr></table></figure>
<p><strong>兼容性:</strong></p>
<p>document.body 对应于页面中 &lt;body&gt;&lt;/body&gt;部分的元素，而document.documentElement则相当于整个HTML，说明浏览器在解释渲染后的页面位置范围不同。</p>
<p>FF、Opera和IE浏览器认为在客户端浏览器展示的页面的内容对应于整个HTML，所以使用document.documentElement来代表，相应的滚动距离则通过document.documentElement.scrollLeft 和 document.documentElement.scrollTop来获取。</p>
<p>Safari和Chrome浏览器认为页面开始于body部分，从而相应的滚动距离用document.body.scrollLeft 和document.body.scrollTop来获取。</p>
<p>另外，FF和IE的quirks mode（兼容模式）下使用document.body获取的。</p>
<h3 id="u83B7_u53D6_u76F8_u5BF9_u4F4D_u7F6E"><a href="#u83B7_u53D6_u76F8_u5BF9_u4F4D_u7F6E" class="headerlink" title="获取相对位置"></a>获取相对位置</h3><p>网页元素的相对位置，指该元素左上角相对于浏览器窗口左上角的坐标。</p>
<ul>
<li>以left坐标为例，利用offsetLeft得到元素的绝对位置，减去scrollLeft的滚动位置，得到相对位置。</li>
<li>或直接利用element.getBoundingClientRect().left得到相对位置。</li>
</ul>
<h2 id="Boolean_u8F6C_u5316_u89C4_u5219"><a href="#Boolean_u8F6C_u5316_u89C4_u5219" class="headerlink" title="Boolean转化规则"></a>Boolean转化规则</h2><p>下面的所有的代码行均会创建初始值为 false 的 Boolean 对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myBoolean=<span class="keyword">new</span> <span class="built_in">Boolean</span>();</span><br><span class="line"><span class="keyword">var</span> myBoolean=<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">var</span> myBoolean=<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">var</span> myBoolean=<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="string">""</span>);</span><br><span class="line"><span class="keyword">var</span> myBoolean=<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">var</span> myBoolean=<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">NaN</span>);</span><br></pre></td></tr></table></figure>
<p>下面的所有的代码行均会创初始值为 true 的 Boolean 对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myBoolean=<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> myBoolean=<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">var</span> myBoolean=<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="string">"true"</span>);</span><br><span class="line"><span class="keyword">var</span> myBoolean=<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="string">"false"</span>);</span><br><span class="line"><span class="keyword">var</span> myBoolean=<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="string">"Bill Gates"</span>);</span><br></pre></td></tr></table></figure>
<p>应用在if判断中，即当x=数字非0,非空字符串,true,obj,array时，<code>if(x)</code>为真；x＝0,null,NaN,false,””,undefined时，<code>if(x)</code>为假。</p>
<h2 id="u4E8B_u4EF6_u7ED1_u5B9A"><a href="#u4E8B_u4EF6_u7ED1_u5B9A" class="headerlink" title="事件绑定"></a>事件绑定</h2><table>
<thead>
<tr>
<th>方法</th>
<th>语法</th>
</tr>
</thead>
<tbody>
<tr>
<td>html</td>
<td>onclick=”func()”</td>
</tr>
<tr>
<td>dom0</td>
<td>ele.onclick=function() {}</td>
</tr>
<tr>
<td></td>
<td>ele.onclick=null;</td>
</tr>
<tr>
<td>dom2</td>
<td>ele.addEventListener() </td>
</tr>
<tr>
<td></td>
<td>ele.removeEventListener()</td>
</tr>
<tr>
<td> dom2(IE8-)</td>
<td>ele.attachEvent() </td>
</tr>
<tr>
<td></td>
<td>ele.detachEvent()</td>
</tr>
</tbody>
</table>
<p>使用事件监听时，为实现跨浏览器兼容，应进行能力检测，即<code>if(ele.addEventListener){ele.addEventListener(type,listener,false)}</code>。</p>
<h2 id="IE_u6D4F_u89C8_u5668_u5224_u65AD"><a href="#IE_u6D4F_u89C8_u5668_u5224_u65AD" class="headerlink" title="IE浏览器判断"></a>IE浏览器判断</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否为IE浏览器，返回-1或者版本号</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isIE</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ua = navigator.userAgent;</span><br><span class="line">    <span class="keyword">var</span> s;</span><br><span class="line">    <span class="comment">// regexObj.exec(str) str.match(regexp);</span></span><br><span class="line">    <span class="keyword">return</span> (s = ua.match(<span class="regexp">/rv:([\d\.]+)/</span>) || <span class="comment">//ie11</span></span><br><span class="line">            ua.match(<span class="regexp">/msie\s([\d.]+)/i</span>)) ? s[<span class="number">1</span>] : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用IE浏览的的userAgent特点进行判断，特点参考<a href="https://msdn.microsoft.com/library/hh869301(v=vs.85" target="_blank" rel="external">IE用户代理字符串更改</a>.aspx#legacy)。</p>
<p>本机测试userAgent结果：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//OSX上win8.1虚拟机，IE11</span></span><br><span class="line"><span class="string">"Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; .NET4.0E; .NET4.0C; rv:11.0) like Gecko"</span></span><br><span class="line"><span class="comment">//OSX上chrome</span></span><br><span class="line">navigator.userAgent</span><br><span class="line"><span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36"</span></span><br></pre></td></tr></table></figure>
<h2 id="u5176_u4ED6"><a href="#u5176_u4ED6" class="headerlink" title="其他"></a>其他</h2><ul>
<li>call()与apply()<br>区别：call()方法接受的是若干个参数的列表，而apply()方法接受的是一个包含多个参数的数组。</li>
<li><a href="https://imququ.com/post/four-ways-to-post-data-in-http.html" target="_blank" rel="external">四种常见的 POST 提交数据方式</a></li>
<li>加号是表示将字符串转换为数字的简便写法。</li>
<li><p><a href="https://segmentfault.com/q/1010000003049959" target="_blank" rel="external">+RegExp[‘\x241’] 是什么意思？？</a>:八进制表示法中 x24 表示 $。</p>
<p>  故RegExp[‘\x241’]=RegExp.$1,用来捕获第一组括号内匹配的数据。加号表示将字符串转换为数字。</p>
</li>
<li><a href="https://www.zhihu.com/question/21861899" target="_blank" rel="external">escape,encodeURI,encodeURIComponent有什么区别?</a>，由于cookie值中禁止使用任何逗号、分号或空格等，因此设置cookie值时可以使用ncodeURIComponent()转换。</li>
<li><a href="http://www.cnblogs.com/huajs/archive/2011/11/10/2244793.html" target="_blank" rel="external">e = e || window.event用法细节讨论</a></li>
<li>date.setDate(days)返回毫秒值，date本身改变为新的Date，若days包含小数会自动作floor处理。</li>
<li>删除字符串两端的空白字符并返回:string.trim()。</li>
<li>定时器：setInterval调用多次，setTimeout调用一次。</li>
<li>Object.keys()方法返回一个由给定对象的所有可枚举自身属性的属性名组成的数组，数组中属性名的排列顺序和使用for-in循环遍历该对象时返回的顺序一致（两者的主要区别是 for-in 还会遍历出一个对象从其原型链上继承到的可枚举属性）。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>task0002的内容是Javascript的学习。</p>
<p><a href="https://github.com/baidu-ife/ife/tree/master/2015_spring/task/task0002#任务描述"><strong>任务要求</strong></a></p>
<p><a href="https://github.com/dawn-CC/ife-task/tree/master/task0002"><strong>code</strong></a></p>
<p><a href="http://dawn-cc.github.io/ife-task/task0002/task0002_1"><strong>demo</strong></a><br>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
      <category term="code" scheme="http://yoursite.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ife_task0001总结]]></title>
    <link href="http://yoursite.com/2016/01/14/ife-task0001%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/01/14/ife-task0001总结/</id>
    <published>2016-01-13T17:12:07.000Z</published>
    <updated>2016-02-24T15:36:17.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/baidu-ife/ife" target="_blank" rel="external">百度Web前端技术学院</a>（Baidu Institute of Front-End Technology简称IFE）在2015年开办过两次前端课程，课程及内容开放在Github上，是前端入门学习不错的资料。</p>
<p>共有四个任务，task0001的综合练习完成在这里😱</p>
<blockquote>
<p><a href="https://github.com/dawn-CC/ife-task/tree/master/task0001/task0001_7" target="_blank" rel="external"><strong>code</strong></a> </p>
<p><a href="http://dawn-cc.github.io/ife-task/task0001/task0001_7/index.html" target="_blank" rel="external"><strong>demo</strong></a></p>
</blockquote>
<p>任务一关于html和css，具体的<a href="https://github.com/baidu-ife/ife/tree/master/2015_spring/task/task0001" target="_blank" rel="external">任务要求</a>。下面对<a href="https://github.com/baidu-ife/ife/tree/master/2015_spring" target="_blank" rel="external">ife_2015spring</a>中task0001的学习过程做一下整理与总结。<br><a id="more"></a></p>
<h2 id="u76F8_u5173_u5B9A_u4E49"><a href="#u76F8_u5173_u5B9A_u4E49" class="headerlink" title="相关定义"></a>相关定义</h2><h3 id="u4EC0_u4E48_u662FWeb"><a href="#u4EC0_u4E48_u662FWeb" class="headerlink" title="什么是Web"></a>什么是Web</h3><p>理解网页访问的过程：<br>根据浏览器输入的地址，向服务器发送HTTP请求，服务器向数据库查询数据，数据库返回数据，服务器返回HTTP响应。浏览器接收响应后就可以显示页面内容了。</p>
<h3 id="u4EC0_u4E48_u662FHTML"><a href="#u4EC0_u4E48_u662FHTML" class="headerlink" title="什么是HTML"></a>什么是HTML</h3><p>接收到的HTTP响应的body部分，对应html内容，html是一种超文本标记语言(HyperText markup language)，可以标记出内容的结构、类型意义，如图片<code>&lt;img&gt;</code>、段落<code>&lt;p&gt;</code>、超链接<code>&lt;a&gt;</code>等。<br>html作为网页的基础，经浏览器解析渲染后可以在页面上显示出来。</p>
<h3 id="u4EC0_u4E48_u662FCSS"><a href="#u4EC0_u4E48_u662FCSS" class="headerlink" title="什么是CSS"></a>什么是CSS</h3><p>CSS即层叠样式表(Cascading style sheets)，为文档的内容指定样式和格式，如字体、背景、边框等。不同的html可以使用相同的css。下图即html在添加一些css前后的区别。<br><img src="http://7xpyd5.com1.z0.glb.clouddn.com/hexo%2Ftask1_1.png" alt=""><br><img src="http://7xpyd5.com1.z0.glb.clouddn.com/hexo%2Ftask1_2.png" alt=""></p>
<h3 id="HTML_u4E0ECSS_u5982_u4F55_u4E00_u8D77_u5DE5_u4F5C"><a href="#HTML_u4E0ECSS_u5982_u4F55_u4E00_u8D77_u5DE5_u4F5C" class="headerlink" title="HTML与CSS如何一起工作"></a>HTML与CSS如何一起工作</h3><p>浏览器展现文档：首先将文档中的标记语言和css转换成DOM(document object model)结构，再将DOM结构向用户展示出来。<br>DOM结构是一种树形结构，元素可以作为节点，同时又作为其包含元素的容器（父节点）。</p>
<h3 id="HTML_u53CACSS_u7684_u53D1_u5C55_u53F2"><a href="#HTML_u53CACSS_u7684_u53D1_u5C55_u53F2" class="headerlink" title="HTML及CSS的发展史"></a>HTML及CSS的发展史</h3><p>80年代后期，<a href="http://zh.wikipedia.org/zh-cn/蒂姆·伯纳斯-李" target="_blank" rel="external">蒂姆·博纳斯-李</a>设计了一种源于<a href="https://en.wikipedia.org/wiki/Standard_Generalized_Markup_Language" target="_blank" rel="external">SGML</a>的分享文档的方式（从html5开始，不再坚守SGML语法。），即HTML，它是一个国际化的标准，由W3C和WHATWG维护。<br>HTML5 是 HTML 标准的最新演进版本。具体特性变化可以参考<a href="http://www.w3.org/TR/html5-diff/#history" target="_blank" rel="external">HTML5 Differences from HTML4</a>和<a href="/"></a>。其中有一些新的阶段和标题标签，如<code>&lt;section&gt;, &lt;article&gt;, &lt;nav&gt;, &lt;header&gt;, &lt;footer&gt;, &lt;aside&gt; 和 &lt;hgroup&gt;</code>等，为web文档的结构和大纲理解带来便利。</p>
<h2 id="u76F8_u5173_u77E5_u8BC6_u70B9"><a href="#u76F8_u5173_u77E5_u8BC6_u70B9" class="headerlink" title="相关知识点"></a>相关知识点</h2><h3 id="u4E00_u4E9B_u57FA_u672C_u7684HTML_u8BED_u6CD5_u53CA_u6807_u7B7E"><a href="#u4E00_u4E9B_u57FA_u672C_u7684HTML_u8BED_u6CD5_u53CA_u6807_u7B7E" class="headerlink" title="一些基本的HTML语法及标签"></a>一些基本的HTML语法及标签</h3><p><a href="http://www.w3.org/TR/2011/WD-html5-20110113/named-character-references.html" target="_blank" rel="external">实体符号</a>，常用的有</p>
<table>
<thead>
<tr>
<th>实体符号</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&amp;gt;</code></td>
<td>表示大于符号”&gt;” (&gt;)</td>
</tr>
<tr>
<td><code>&amp;lt;</code></td>
<td>表示小于符号”&lt;” (&lt;)</td>
</tr>
<tr>
<td><code>&amp;amp;</code></td>
<td>表示和符号”and”(&amp;)</td>
</tr>
<tr>
<td><code>&amp;quot;</code></td>
<td>表示引用符号” (“)</td>
</tr>
<tr>
<td><code>&amp;nbsp;</code></td>
<td>空格</td>
</tr>
</tbody>
</table>
<h3 id="CSS_u7684_u7EE7_u627F_u3001_u5C42_u53E0_u3001_u6837_u5F0F_u4F18_u5148_u7EA7"><a href="#CSS_u7684_u7EE7_u627F_u3001_u5C42_u53E0_u3001_u6837_u5F0F_u4F18_u5148_u7EA7" class="headerlink" title="CSS的继承、层叠、样式优先级"></a>CSS的继承、层叠、样式优先级</h3><blockquote>
<p>对于层叠来说，有三种主要的样式来源：</p>
<ul>
<li>浏览器对HTML定义的默认样式。</li>
<li>用户定义的样式。</li>
<li>开发者定义的样式，可以有三种形式：<ul>
<li>定义在外部文件（外链样式）：常用。</li>
<li>在页面的头部定义（内联样式）：只在本页面内生效。</li>
<li>定义在特定的元素身上（行内样式）：多用于测试，可维    护性较差。</li>
</ul>
</li>
</ul>
</blockquote>
<p>层叠样式的优先级一般为<br><code>user agent declarations &lt; user normal declarations &lt; author normal declarations &lt; author important declarations &lt; user important declarations</code>，详见<a href="http://www.w3.org/TR/CSS21/cascade.html" target="_blank" rel="external">Assigning property values, Cascading, and Inheritance</a>6.4节。但是<strong><code>!important</code></strong>关键字可以为样式设置最高权值。</p>
<p>继承指的是子元素会继承父元素的某些样式。子元素的样式优先级高于父元素。</p>
<h3 id="CSS_u9009_u62E9_u5668"><a href="#CSS_u9009_u62E9_u5668" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><p>选择器有类选择器、id选择器、伪类选择器等。</p>
<p>权值计算规则为：标签＝1，类选择器＝10，ID选择器＝100，继承的权值最低(0.1)，计算时将选择内容的权值相加，权值高的优先。</p>
<h3 id="u6587_u672C_u76F8_u5173_u6837_u5F0F_u5C5E_u6027"><a href="#u6587_u672C_u76F8_u5173_u6837_u5F0F_u5C5E_u6027" class="headerlink" title="文本相关样式属性"></a>文本相关样式属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">text-transform</span>:<span class="comment">/*字母大小写*/</span></span><br><span class="line"><span class="tag">word-spacing</span>:<span class="comment">/*字间距，英文为单词间距*/</span></span><br><span class="line"><span class="tag">white-space</span>:<span class="comment">/*元素内空白处理方式，如pre/nowrap等*/</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">font-face</span></span>:<span class="comment">/*定义字体及路径src*/</span></span><br></pre></td></tr></table></figure>
<h3 id="u884C_u9AD8_u5C5E_u6027"><a href="#u884C_u9AD8_u5C5E_u6027" class="headerlink" title="行高属性"></a>行高属性</h3><p>理解行高：行高与font-size的差＝行间距。</p>
<p><a href="http://www.cnblogs.com/fengzheng126/archive/2012/05/18/2507632.html" target="_blank" rel="external">深入了解行高属性</a></p>
<p>上文可以简单总结为：  </p>
<blockquote>
<p>在line-height中，％值会将计算出的行高px值继承，px值会被原样继承，数字(如1.5)会继承比例后随font-size作缩放。<br>boxes类型有4种:containging boxes、inline boxes、line boxes、content area。<br>line box的行高取决于它内部最高的inline box。</p>
</blockquote>
<h2 id="u76D2_u6A21_u578B_u53CA_u5B9A_u4F4D"><a href="#u76D2_u6A21_u578B_u53CA_u5B9A_u4F4D" class="headerlink" title="盒模型及定位"></a>盒模型及定位</h2><ol>
<li><p>用两种方法来实现一个背景色为红色、宽度为960px的<code>&lt;DIV&gt;</code>在浏览器中居中</p>
<ul>
<li>定宽block元素，设置左右margin为auto;</li>
<li>inline元素，设置父元素<code>text-align: center;</code>，若需设置元素width等，则<code>display:inline-block;</code>。</li>
</ul>
</li>
<li>在不使用border-radius的情况下实现一个可复用的高度和宽度都自适应的圆角矩形<ul>
<li>使用多张图片作为背景；</li>
<li>参考<a href="http://blog.csdn.net/wangxiaohui6687/article/details/7678661" target="_blank" rel="external">css圆角矩形框 - wangxiaohui6687的专栏 - 博客频道 - CSDN.NET</a>，将圆角矩形的圆角分割为像素块。</li>
</ul>
</li>
<li>用两种不同的方法来实现一个两列布局，其中左侧部分宽度固定、右侧部分宽度随浏览器宽度的变化而自适应变化 <ul>
<li>使用<code>position: absolute</code>针对父元素定位，右侧部分设置<code>margin-left</code>为左侧的宽度；</li>
<li>使用<code>float: left;</code>，右侧部分设置<code>margin-left</code>为左侧的宽度；</li>
<li>使用flex布局，参考<a href="http://zh.learnlayout.com/flexbox.html" target="_blank" rel="external">CSS - flexbox</a>。</li>
</ul>
</li>
<li>用两种不同的方式来实现一个三列布局，其中左侧和右侧的部分宽度固定，中间部分宽度随浏览器宽度的变化而自适应变化<ul>
<li>左右利用<code>float: left;float:right</code>控制，中间利用<code>margin</code>值控制位置。<strong>开始遇到问题</strong>：DOM结构按照左中右的顺序，结果右边部分跑到下一行了。没有注意非浮动div的block属性。改为左右中即可。</li>
<li>参考<a href="http://www.imooc.com/wenda/detail/254035" target="_blank" rel="external">双飞翼布局介绍-始于淘宝UED_慕课猿问</a>，设置<code>float: left;</code>，定位中间div(父div设为<code>width: 100%;</code>)后，左右元素分别设置负边距调整位置。</li>
</ul>
</li>
<li>实现一个浮动布局，红色容器中每一行的蓝色容器数量随着浏览器宽度的变化而变化 <ul>
<li>设置float和margin，注意之后的元素需要清除浮动<code>clear: left;</code>。<strong>遇到的问题</strong>：设置的背景色红色不能正确显示。这里涉及到BFC，可以通过修改overflow属性来修正，后文对BFC做详细介绍；</li>
<li>使用<code>display: inline-block</code>。</li>
</ul>
</li>
</ol>
<blockquote>
<p><a href="https://github.com/dawn-CC/ife-task/tree/master/task0001/task0001_1-6" target="_blank" rel="external">code</a></p>
</blockquote>
<h2 id="u7EFC_u5408_u7EC3_u4E60"><a href="#u7EFC_u5408_u7EC3_u4E60" class="headerlink" title="综合练习"></a>综合练习</h2><blockquote>
<p><a href="https://github.com/dawn-CC/ife-task/tree/master/task0001/task0001_7" target="_blank" rel="external">code</a><br><a href="http://dawn-cc.github.io/ife-task/task0001/task0001_7/index.html" target="_blank" rel="external">demo</a></p>
</blockquote>
<p>练习的内容是，在不使用框架的情况下，把设计稿转化为html和css。</p>
<p>框架什么的，刚好我也不会……刚开始真的不知道从哪里下手，参考了许多人的代码后，尝试独立写，写的过程是一个不断掉坑、从坑里爬出来的过程，泪，最后弱弱的满足。</p>
<p><strong>一些坑：</strong></p>
<h3 id="u53BB_u9664_u9ED8_u8BA4_u8FB9_u8DDD"><a href="#u53BB_u9664_u9ED8_u8BA4_u8FB9_u8DDD" class="headerlink" title="去除默认边距"></a>去除默认边距</h3><p>h1等标签元素默认的padding、margin，会影响margin合并规则与实际不一致。可在最前面把需要的标签（或使用*）内外边距都设为0。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="u53BB_u9664inline-block_u4E4B_u95F4_u7684_u7A7A_u9699"><a href="#u53BB_u9664inline-block_u4E4B_u95F4_u7684_u7A7A_u9699" class="headerlink" title="去除inline-block之间的空隙"></a>去除inline-block之间的空隙</h3><p>针对inline-block之间会存在空隙的问题。<br>解决：参考</p>
<blockquote>
<p><a href="http://www.imooc.com/wiki/view?pid=138" target="_blank" rel="external">解决行内元素间隙bug问题</a>(这里介绍的比较简单）<br><a href="https://css-tricks.com/fighting-the-space-between-inline-block-elements/" target="_blank" rel="external">Fighting the Space Between Inline Block Elements | CSS-Tricks</a></p>
</blockquote>
<p>几种方法总结如下：</p>
<ol>
<li>负边距；</li>
<li>父元素<code>font-size: 0;</code>；</li>
<li>去除各元素首尾<strong>之间</strong>的空格、tab等；</li>
<li>省略闭合标签；</li>
<li>其他flex等方式；</li>
</ol>
<p><em>类似的问题：</em></p>
<p>写完<code>header</code>部分后发现，右侧的github图标虽然对header使用了绝对定位<code>position: absolute;</code>，且<code>bottom: 0;</code>，图标仍与底边存在空隙。</p>
<p>原因：<code>&lt;img&gt;</code>默认为inline元素，具有默认的line-height(4px)。见<a href="http://stackoverflow.com/questions/11126685/why-does-container-div-insist-on-being-slightly-larger-than-its-contentimg" target="_blank" rel="external">stackoverflow</a>。</p>
<h3 id="u6E05_u9664_u6D6E_u52A8_u4E0EBFC"><a href="#u6E05_u9664_u6D6E_u52A8_u4E0EBFC" class="headerlink" title="清除浮动与BFC"></a>清除浮动与BFC</h3><blockquote>
<p><a href="http://www.iyunlu.com/view/css-xhtml/55.html" target="_blank" rel="external">那些年我们一起清除过的浮动-层叠之美</a></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.clearfix:after &#123;</span><br><span class="line">    content: "200B"; </span><br><span class="line">    display: block;</span><br><span class="line">    height: 0; </span><br><span class="line">    clear: both; </span><br><span class="line">&#125;</span><br><span class="line">.clearfix &#123;</span><br><span class="line">    *zoom: 1; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://zh.learnlayout.com/clearfix.html" target="_blank" rel="external">CSS - 清除浮动（clearfix hack）</a></p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">overflow</span>: <span class="tag">auto</span>;</span><br><span class="line"><span class="tag">zoom</span>: 1;</span><br></pre></td></tr></table></figure>
<p>清除浮动的原理与BFC有关，BFC指块级格式化上下文。</p>
<p>BFC的创建</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="external">块格式化上下文 - Web 开发者指南 | MDN</a></p>
</blockquote>
<p>影响</p>
<blockquote>
<p>定位和清除浮动的样式规则只适用于同一块格式化上下文中的元素。</p>
</blockquote>
<p>用法</p>
<blockquote>
<p><a href="http://www.cnblogs.com/pigtail/archive/2013/01/23/2871627.html" target="_blank" rel="external">关于Block Formatting Context－－BFC和IE的hasLayout</a></p>
</blockquote>
<h3 id="u5176_u4ED6"><a href="#u5176_u4ED6" class="headerlink" title="其他"></a>其他</h3><ul>
<li>css文件名用数字开头，会使link无效。</li>
<li>发现index页面中banner部分的文字位置改变，排查发现原因是后文选择器使用错误。<br>  <code>.gallery-item h2,p {
  margin-left: 50px;
  }</code>表示<code>.gallery-item h2</code>和<code>p</code>。<br>  应改正为<code>.gallery-item h2, .gallery-item p</code>。</li>
<li>标题靠右要使用<code>text-align</code>，若用<code>float</code>，则之后的段落文本会呈环绕状。</li>
<li>background 不包括 margin 部分。</li>
<li><p>渐变背景色的实现与兼容：</p>
<blockquote>
<p><a href="http://www.colorzilla.com/gradient-editor/" target="_blank" rel="external">gradient-editor</a></p>
</blockquote>
  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">background: -moz-linear-gradient(top, rgba(255,255,255,0.7) 0%, rgba(255,255,255,0.5) 75%, rgba(255,255,255,0) 100%); /* FF3.6+ */</span><br><span class="line">background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgba(255,255,255,0.7)), color-stop(75%,rgba(255,255,255,0.5)), color-stop(100%,rgba(255,255,255,0))); /* Chrome,Safari4+ */</span><br><span class="line">background: -webkit-linear-gradient(top, rgba(255,255,255,0.7) 0%,rgba(255,255,255,0.5) 75%,rgba(255,255,255,0) 100%); /* Chrome10+,Safari5.1+ */</span><br><span class="line">background: -o-linear-gradient(top, rgba(255,255,255,0.7) 0%,rgba(255,255,255,0.5) 75%,rgba(255,255,255,0) 100%); /* Opera 11.10+ */</span><br><span class="line">background: -ms-linear-gradient(top, rgba(255,255,255,0.7) 0%,rgba(255,255,255,0.5) 75%,rgba(255,255,255,0) 100%); /* IE10+ */</span><br><span class="line">background: linear-gradient(to bottom, rgba(255,255,255,0.7) 0%,rgba(255,255,255,0.5) 75%,rgba(255,255,255,0) 100%); /* W3C */</span><br><span class="line">filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#b3ffffff', endColorstr='#00ffffff',GradientType=0 ); /* IE6-9 */</span><br></pre></td></tr></table></figure>
</li>
<li><p>url()本地路径要以../开头。</p>
</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries" target="_blank" rel="external">css媒体查询</a></li>
<li><a href="http://www.xuebuyuan.com/1674951.html" target="_blank" rel="external">父元素与子元素之间的margin问题</a></li>
<li>::after伪元素介绍<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::after" target="_blank" rel="external">::after (:after) - CSS | MDN</a></li>
<li>写html布局的时候需要注意<a href="http://justineo.github.io/slideshows/semantic-html/#/" target="_blank" rel="external">web语义化</a>。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/baidu-ife/ife">百度Web前端技术学院</a>（Baidu Institute of Front-End Technology简称IFE）在2015年开办过两次前端课程，课程及内容开放在Github上，是前端入门学习不错的资料。</p>
<p>共有四个任务，task0001的综合练习完成在这里😱</p>
<blockquote>
<p><a href="https://github.com/dawn-CC/ife-task/tree/master/task0001/task0001_7"><strong>code</strong></a> </p>
<p><a href="http://dawn-cc.github.io/ife-task/task0001/task0001_7/index.html"><strong>demo</strong></a></p>
</blockquote>
<p>任务一关于html和css，具体的<a href="https://github.com/baidu-ife/ife/tree/master/2015_spring/task/task0001">任务要求</a>。下面对<a href="https://github.com/baidu-ife/ife/tree/master/2015_spring">ife_2015spring</a>中task0001的学习过程做一下整理与总结。<br>]]>
    
    </summary>
    
      <category term="html&amp;css" scheme="http://yoursite.com/tags/html-css/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
      <category term="code" scheme="http://yoursite.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mac下Hexo博客搭建]]></title>
    <link href="http://yoursite.com/2016/01/12/mac%E4%B8%8BHexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2016/01/12/mac下Hexo博客搭建/</id>
    <published>2016-01-12T08:31:27.000Z</published>
    <updated>2016-02-24T15:31:35.000Z</updated>
    <content type="html"><![CDATA[<p>第一篇文章简单纪录一下第一次搭建blog的过程。</p>
<p>经验告诉我<strong>文档大法好</strong>，可以少踩坑，避免很多不必要的操作。因此基本都是在<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">官方文档</a>指导下操作的，参考了部分文章。<br><a id="more"></a></p>
<h2 id="Hexo_u5B89_u88C5"><a href="#Hexo_u5B89_u88C5" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="external"><strong>Hexo</strong></a>是一个简洁高效的博客框架，使用 Markdown（或其他渲染引擎）解析文章，能够快速生成静态网页。</p>
<h3 id="u5B89_u88C5git"><a href="#u5B89_u88C5git" class="headerlink" title="安装git"></a>安装git</h3><p>已经安装，故跳过；</p>
<h3 id="u5B89_u88C5node-JS"><a href="#u5B89_u88C5node-JS" class="headerlink" title="安装node.JS"></a>安装<a href="https://nodejs.org/en/" target="_blank" rel="external">node.JS</a></h3><p>建议使用<a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a>(node version manager)进行安装，便于对多版本node进行管理</p>
<blockquote>
<p>安装nvm。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.<span class="number">30.1</span>/install.sh | bash</span><br></pre></td></tr></table></figure></p>
<p><a href="/#question">我遇到的问题</a><br>安装Node.JS。4代表版本号。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install <span class="number">4</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="u5B89_u88C5Hexo_u3002"><a href="#u5B89_u88C5Hexo_u3002" class="headerlink" title="安装Hexo。"></a>安装Hexo。</h3><p>装完前两个，终于可以装Hexo啦。这里npm是nodejs的包管理器。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>
<h2 id="Hexo_u5EFA_u7AD9"><a href="#Hexo_u5EFA_u7AD9" class="headerlink" title="Hexo建站"></a>Hexo建站</h2><p>安装Hexo后，进入计划存放文件的目录。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init dawncc</span><br><span class="line"><span class="built_in">cd</span> dawncc</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p>
<p>在dawncc下会新建一系列文件，如<code>_config.yml,source,theme</code>等，执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></p>
<p>或可简写为<code>hexo s</code>后，就可以通过<code>http://localhost:4000</code>在本地打开构建完成的网站了～</p>
<h2 id="Hexo_u90E8_u7F72"><a href="#Hexo_u90E8_u7F72" class="headerlink" title="Hexo部署"></a>Hexo部署</h2><p>为了能正常访问网站，需要将网站部署(deploy)到服务器上，这里使用了github的<a href="https://pages.github.com" target="_blank" rel="external">github pages</a>服务。</p>
<h3 id="u521B_u5EFArepository"><a href="#u521B_u5EFArepository" class="headerlink" title="创建repository"></a>创建repository</h3><p>创建一个与用户名同名的repo，例如<code>dawn-cc.github.io</code>这里不需要创建README，因为即使现在创建了，在之后deploy的时候也会被覆盖掉。</p>
<h3 id="u4FEE_u6539_config-yml"><a href="#u4FEE_u6539_config-yml" class="headerlink" title="修改_config.yml"></a>修改_config.yml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://dawn-cc.github.com/xxx</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>可以添加type和repo来使用多个deployer。</p>
<p><strong>进行所有修改后，在deploy前需要执行<code>hexo generate</code>or简写为<code>hexo g</code>来生成页面文件。</strong></p>
<h3 id="u5B89_u88C5hexo-deployer-git"><a href="#u5B89_u88C5hexo-deployer-git" class="headerlink" title="安装hexo-deployer-git"></a>安装hexo-deployer-git</h3><p>我原先没有安装，执行<code>hexo deploy</code>的时候返回<code>ERROR</code>……所以应该先安装。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>
<p>成功后，就可以通过域名<a href="/dawn-cc.github.io">dawn-cc.github.io</a>来访问啦。</p>
<h2 id="u9047_u5230_u7684_u95EE_u9898"><a href="#u9047_u5230_u7684_u95EE_u9898" class="headerlink" title="遇到的问题"></a><a name="question">遇到的问题</a></h2><h3 id="u5B89_u88C5nvm_u65F6"><a href="#u5B89_u88C5nvm_u65F6" class="headerlink" title="安装nvm时"></a>安装nvm时</h3><p><img src="http://7xpyd5.com1.z0.glb.clouddn.com/hexo%2Fnvm.png" alt=""></p>
<p>提示需要手动将<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"/User/dawn/.nvm"</span></span><br><span class="line">[ <span class="operator">-s</span> <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span></span><br></pre></td></tr></table></figure></p>
<p>添加到~/.bash_profile, ~/.zshrc or ~/.profile中，要手动操作是因为我的路径下没有这些文件之一，所以重新创建就可以了。这里由于好奇和无知……才知道原来不止有bash……<br><img src="http://7xpyd5.com1.z0.glb.clouddn.com/hexo%2Fshell.png" alt=""><br>装了<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">oh my zsh</a>，据说联想和补全功能比较强大。</p>
<h3 id="deploy_u65F6"><a href="#deploy_u65F6" class="headerlink" title="deploy时"></a>deploy时</h3><p>_config.yml文件的格式要求严格，如<code>type: git</code>中的<code>:</code>之后必须要有空格。</p>
<h3 id="u7F16_u8F91blog_u65F6"><a href="#u7F16_u8F91blog_u65F6" class="headerlink" title="编辑blog时"></a>编辑blog时</h3><p>在MacDown中编辑时预览的标题效果，本地<code>hexo s</code>查看发现<code>#</code>没有被解析，其实是因为标准写法<code>## 标题</code>中<code>#</code>后需要有空格，格式要规范啊。</p>
<h3 id="u4E00_u4E9B_u7B80_u5199"><a href="#u4E00_u4E9B_u7B80_u5199" class="headerlink" title="一些简写"></a>一些简写</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo server == hexo s</span><br><span class="line">hexo generate == hexo g</span><br><span class="line">hexo deploy == hexo d</span><br><span class="line">hexo new == hexo n</span><br></pre></td></tr></table></figure>
<h2 id="u4E3B_u9898_u8BBE_u7F6E"><a href="#u4E3B_u9898_u8BBE_u7F6E" class="headerlink" title="主题设置"></a>主题设置</h2><p>找到心仪的<a href="https://hexo.io/themes/" target="_blank" rel="external">主题</a>，进入Github，git clone到dawncc/themes。比如很火的<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">next</a>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next.git next</span><br></pre></td></tr></table></figure>
<p>然后修改_config.yml中<code>theme: next</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s --debug <span class="comment">#本地浏览效果，没问题就deploy上去～</span></span><br></pre></td></tr></table></figure></p>
<p>其他自定义设置，比如RSS，评论等都可以参考next的<a href="http://theme-next.iissnan.com" target="_blank" rel="external">文档</a>。</p>
<h2 id="u53D1_u8868_u6587_u7AE0"><a href="#u53D1_u8868_u6587_u7AE0" class="headerlink" title="发表文章"></a>发表文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new mac下Hexo博客搭建</span><br></pre></td></tr></table></figure>
<p>这样<code>source/_post</code>目录下就会生成<code>mac下Hexo博客搭建.md</code>文件，根据需要修改title部分,在<code>---</code>分隔线后，使用markdown编辑文章即可。不熟练的话可以用一些编辑器，比如MacDown，subline的markdown插件等。</p>
<p>编辑完之后，<code>hexo s</code>就能本地看到新编辑的文章了，没问题就<code>hexo g</code>,<code>hexo d</code>吧。</p>
<h2 id="u5176_u4ED6_u53C2_u8003_u8D44_u6599"><a href="#u5176_u4ED6_u53C2_u8003_u8D44_u6599" class="headerlink" title="其他参考资料"></a>其他参考资料</h2><ul>
<li><a href="http://www.isetsuna.com/hexo/writing-image/" target="_blank" rel="external">Hexo博客系列（四）：写作和图床 | Setsuna’s Blog</a></li>
<li><a href="http://www.cnblogs.com/canglangwenyue/p/3693110.html" target="_blank" rel="external">Mac OS 下搭建hexo个人博客 - canglangwenyue - 博客园</a></li>
<li><a href="http://segmentfault.com/q/1010000002561642" target="_blank" rel="external">category - hexo分类与tags配置 - SegmentFault</a></li>
<li><a href="http://ibruce.info/2013/11/22/hexo-your-blog/?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">hexo你的博客 | 不如</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>第一篇文章简单纪录一下第一次搭建blog的过程。</p>
<p>经验告诉我<strong>文档大法好</strong>，可以少踩坑，避免很多不必要的操作。因此基本都是在<a href="https://hexo.io/zh-cn/docs/">官方文档</a>指导下操作的，参考了部分文章。<br>]]>
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="code" scheme="http://yoursite.com/categories/code/"/>
    
  </entry>
  
</feed>
